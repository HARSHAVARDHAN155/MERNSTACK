{"ast":null,"code":"\"use strict\";\n\nvar fuse = require('../lib/fuse');\n\nexports.fuseContent = function (content, relativePath, mode, callback) {\n  var content = content || '',\n      path = path || '',\n      mode = mode || 'js',\n      fuser; // check we have content\n\n  if (!content.length) return callback(null, content); // check we have a path\n\n  if (!relativePath.length) return callback(new Error('No relative path was supplied.'));\n  fuser = new fuse.Fuse();\n  fuser.on('fuse', function (results) {\n    // an object with updated, and fused is returned\n    callback(null, results.updated);\n  });\n  fuser.on('nofuse', function (results) {\n    // only the original content is returned\n    callback(null, results.updated);\n  });\n  fuser.on('error', function (err) {\n    callback(err);\n  });\n  fuser.fuseContent(content, relativePath, mode);\n};\n\nexports.fuseFile = function (input, output, callback) {\n  // arguments: input, output, compress, mangle, lint\n  var fuser = fuse.fuse(input, output);\n  fuser.on('fuse', function (results) {\n    callback(null, results);\n  });\n  fuser.on('nofuse', function (results) {\n    callback(null, results);\n  });\n  fuser.on('error', function (err) {\n    callback(err);\n  }); // fuse the file, and the thrown events will take care of process exit\n\n  fuser.fuseFile();\n};","map":{"version":3,"sources":["/home/harsha/Desktop/ug2 spring SEM2/DAss/mongo/frontend/node_modules/fuse/lib/index.js"],"names":["fuse","require","exports","fuseContent","content","relativePath","mode","callback","path","fuser","length","Error","Fuse","on","results","updated","err","fuseFile","input","output"],"mappings":"AAAA;;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,aAAD,CAAlB;;AAEAC,OAAO,CAACC,WAAR,GAAsB,UAAUC,OAAV,EAAmBC,YAAnB,EAAiCC,IAAjC,EAAuCC,QAAvC,EAAiD;AAEtE,MAAIH,OAAO,GAAGA,OAAO,IAAI,EAAzB;AAAA,MACCI,IAAI,GAAGA,IAAI,IAAI,EADhB;AAAA,MAECF,IAAI,GAAGA,IAAI,IAAI,IAFhB;AAAA,MAGCG,KAHD,CAFsE,CAOtE;;AACA,MAAI,CAACL,OAAO,CAACM,MAAb,EAAqB,OAAOH,QAAQ,CAAC,IAAD,EAAOH,OAAP,CAAf,CARiD,CAUtE;;AACA,MAAI,CAACC,YAAY,CAACK,MAAlB,EAA0B,OAAOH,QAAQ,CAAC,IAAII,KAAJ,CAAU,gCAAV,CAAD,CAAf;AAE1BF,EAAAA,KAAK,GAAG,IAAIT,IAAI,CAACY,IAAT,EAAR;AAEAH,EAAAA,KAAK,CAACI,EAAN,CAAS,MAAT,EAAiB,UAAUC,OAAV,EAAmB;AACnC;AACAP,IAAAA,QAAQ,CAAC,IAAD,EAAOO,OAAO,CAACC,OAAf,CAAR;AACA,GAHD;AAKAN,EAAAA,KAAK,CAACI,EAAN,CAAS,QAAT,EAAmB,UAAUC,OAAV,EAAmB;AACrC;AACAP,IAAAA,QAAQ,CAAC,IAAD,EAAOO,OAAO,CAACC,OAAf,CAAR;AACA,GAHD;AAKAN,EAAAA,KAAK,CAACI,EAAN,CAAS,OAAT,EAAkB,UAAUG,GAAV,EAAe;AAChCT,IAAAA,QAAQ,CAACS,GAAD,CAAR;AACA,GAFD;AAIAP,EAAAA,KAAK,CAACN,WAAN,CAAkBC,OAAlB,EAA2BC,YAA3B,EAAyCC,IAAzC;AAEA,CA/BD;;AAiCAJ,OAAO,CAACe,QAAR,GAAmB,UAAUC,KAAV,EAAiBC,MAAjB,EAAyBZ,QAAzB,EAAmC;AAErD;AACA,MAAIE,KAAK,GAAGT,IAAI,CAACA,IAAL,CAAUkB,KAAV,EAAiBC,MAAjB,CAAZ;AAEAV,EAAAA,KAAK,CAACI,EAAN,CAAS,MAAT,EAAiB,UAAUC,OAAV,EAAmB;AACnCP,IAAAA,QAAQ,CAAC,IAAD,EAAOO,OAAP,CAAR;AACA,GAFD;AAIAL,EAAAA,KAAK,CAACI,EAAN,CAAS,QAAT,EAAmB,UAAUC,OAAV,EAAmB;AACrCP,IAAAA,QAAQ,CAAC,IAAD,EAAOO,OAAP,CAAR;AACA,GAFD;AAIAL,EAAAA,KAAK,CAACI,EAAN,CAAS,OAAT,EAAkB,UAAUG,GAAV,EAAe;AAChCT,IAAAA,QAAQ,CAACS,GAAD,CAAR;AACA,GAFD,EAbqD,CAiBrD;;AACAP,EAAAA,KAAK,CAACQ,QAAN;AAEA,CApBD","sourcesContent":["\"use strict\";\n\nvar fuse = require('../lib/fuse');\n\nexports.fuseContent = function (content, relativePath, mode, callback) {\n\n\tvar content = content || '',\n\t\tpath = path || '',\n\t\tmode = mode || 'js',\n\t\tfuser;\n\n\t// check we have content\n\tif (!content.length) return callback(null, content);\n\n\t// check we have a path\n\tif (!relativePath.length) return callback(new Error('No relative path was supplied.'));\n\n\tfuser = new fuse.Fuse();\n\n\tfuser.on('fuse', function (results) {\n\t\t// an object with updated, and fused is returned\n\t\tcallback(null, results.updated);\n\t});\n\n\tfuser.on('nofuse', function (results) {\n\t\t// only the original content is returned\n\t\tcallback(null, results.updated);\n\t});\n\n\tfuser.on('error', function (err) {\n\t\tcallback(err);\n\t});\n\n\tfuser.fuseContent(content, relativePath, mode);\n\n};\n\nexports.fuseFile = function (input, output, callback) {\n\n\t// arguments: input, output, compress, mangle, lint\n\tvar fuser = fuse.fuse(input, output);\n\n\tfuser.on('fuse', function (results) {\n\t\tcallback(null, results);\n\t});\n\n\tfuser.on('nofuse', function (results) {\n\t\tcallback(null, results);\n\t});\n\n\tfuser.on('error', function (err) {\n\t\tcallback(err);\n\t});\n\n\t// fuse the file, and the thrown events will take care of process exit\n\tfuser.fuseFile();\n\n};"]},"metadata":{},"sourceType":"script"}