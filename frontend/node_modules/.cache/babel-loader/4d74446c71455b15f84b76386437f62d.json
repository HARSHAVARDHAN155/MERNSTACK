{"ast":null,"code":"var colors = require('./colors');\n\nmodule['exports'] = function () {\n  //\n  // Extends prototype of native string object to allow for \"foo\".red syntax\n  //\n  var addProperty = function (color, func) {\n    String.prototype.__defineGetter__(color, func);\n  };\n\n  addProperty('strip', function () {\n    return colors.strip(this);\n  });\n  addProperty('stripColors', function () {\n    return colors.strip(this);\n  });\n  addProperty('trap', function () {\n    return colors.trap(this);\n  });\n  addProperty('zalgo', function () {\n    return colors.zalgo(this);\n  });\n  addProperty('zebra', function () {\n    return colors.zebra(this);\n  });\n  addProperty('rainbow', function () {\n    return colors.rainbow(this);\n  });\n  addProperty('random', function () {\n    return colors.random(this);\n  });\n  addProperty('america', function () {\n    return colors.america(this);\n  }); //\n  // Iterate through all default styles and colors\n  //\n\n  var x = Object.keys(colors.styles);\n  x.forEach(function (style) {\n    addProperty(style, function () {\n      return colors.stylize(this, style);\n    });\n  });\n\n  function applyTheme(theme) {\n    //\n    // Remark: This is a list of methods that exist\n    // on String that you should not overwrite.\n    //\n    var stringPrototypeBlacklist = ['__defineGetter__', '__defineSetter__', '__lookupGetter__', '__lookupSetter__', 'charAt', 'constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'toLocaleString', 'toString', 'valueOf', 'charCodeAt', 'indexOf', 'lastIndexOf', 'length', 'localeCompare', 'match', 'repeat', 'replace', 'search', 'slice', 'split', 'substring', 'toLocaleLowerCase', 'toLocaleUpperCase', 'toLowerCase', 'toUpperCase', 'trim', 'trimLeft', 'trimRight'];\n    Object.keys(theme).forEach(function (prop) {\n      if (stringPrototypeBlacklist.indexOf(prop) !== -1) {\n        console.log('warn: '.red + ('String.prototype' + prop).magenta + ' is probably something you don\\'t want to override.  ' + 'Ignoring style name');\n      } else {\n        if (typeof theme[prop] === 'string') {\n          colors[prop] = colors[theme[prop]];\n          addProperty(prop, function () {\n            return colors[prop](this);\n          });\n        } else {\n          var themePropApplicator = function (str) {\n            var ret = str || this;\n\n            for (var t = 0; t < theme[prop].length; t++) {\n              ret = colors[theme[prop][t]](ret);\n            }\n\n            return ret;\n          };\n\n          addProperty(prop, themePropApplicator);\n\n          colors[prop] = function (str) {\n            return themePropApplicator(str);\n          };\n        }\n      }\n    });\n  }\n\n  colors.setTheme = function (theme) {\n    if (typeof theme === 'string') {\n      console.log('colors.setTheme now only accepts an object, not a string. ' + 'If you are trying to set a theme from a file, it is now your (the ' + 'caller\\'s) responsibility to require the file.  The old syntax ' + 'looked like colors.setTheme(__dirname + ' + '\\'/../themes/generic-logging.js\\'); The new syntax looks like ' + 'colors.setTheme(require(__dirname + ' + '\\'/../themes/generic-logging.js\\'));');\n      return;\n    } else {\n      applyTheme(theme);\n    }\n  };\n};","map":{"version":3,"sources":["/home/harsha/Desktop/ug2 spring SEM2/DAss/mongo/frontend/node_modules/colors/lib/extendStringPrototype.js"],"names":["colors","require","module","addProperty","color","func","String","prototype","__defineGetter__","strip","trap","zalgo","zebra","rainbow","random","america","x","Object","keys","styles","forEach","style","stylize","applyTheme","theme","stringPrototypeBlacklist","prop","indexOf","console","log","red","magenta","themePropApplicator","str","ret","t","length","setTheme"],"mappings":"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","sourcesContent":["var colors = require('./colors');\n\nmodule['exports'] = function() {\n  //\n  // Extends prototype of native string object to allow for \"foo\".red syntax\n  //\n  var addProperty = function(color, func) {\n    String.prototype.__defineGetter__(color, func);\n  };\n\n  addProperty('strip', function() {\n    return colors.strip(this);\n  });\n\n  addProperty('stripColors', function() {\n    return colors.strip(this);\n  });\n\n  addProperty('trap', function() {\n    return colors.trap(this);\n  });\n\n  addProperty('zalgo', function() {\n    return colors.zalgo(this);\n  });\n\n  addProperty('zebra', function() {\n    return colors.zebra(this);\n  });\n\n  addProperty('rainbow', function() {\n    return colors.rainbow(this);\n  });\n\n  addProperty('random', function() {\n    return colors.random(this);\n  });\n\n  addProperty('america', function() {\n    return colors.america(this);\n  });\n\n  //\n  // Iterate through all default styles and colors\n  //\n  var x = Object.keys(colors.styles);\n  x.forEach(function(style) {\n    addProperty(style, function() {\n      return colors.stylize(this, style);\n    });\n  });\n\n  function applyTheme(theme) {\n    //\n    // Remark: This is a list of methods that exist\n    // on String that you should not overwrite.\n    //\n    var stringPrototypeBlacklist = [\n      '__defineGetter__', '__defineSetter__', '__lookupGetter__',\n      '__lookupSetter__', 'charAt', 'constructor', 'hasOwnProperty',\n      'isPrototypeOf', 'propertyIsEnumerable', 'toLocaleString', 'toString',\n      'valueOf', 'charCodeAt', 'indexOf', 'lastIndexOf', 'length',\n      'localeCompare', 'match', 'repeat', 'replace', 'search', 'slice',\n      'split', 'substring', 'toLocaleLowerCase', 'toLocaleUpperCase',\n      'toLowerCase', 'toUpperCase', 'trim', 'trimLeft', 'trimRight',\n    ];\n\n    Object.keys(theme).forEach(function(prop) {\n      if (stringPrototypeBlacklist.indexOf(prop) !== -1) {\n        console.log('warn: '.red + ('String.prototype' + prop).magenta +\n          ' is probably something you don\\'t want to override.  ' +\n          'Ignoring style name');\n      } else {\n        if (typeof(theme[prop]) === 'string') {\n          colors[prop] = colors[theme[prop]];\n          addProperty(prop, function() {\n            return colors[prop](this);\n          });\n        } else {\n          var themePropApplicator = function(str) {\n            var ret = str || this;\n            for (var t = 0; t < theme[prop].length; t++) {\n              ret = colors[theme[prop][t]](ret);\n            }\n            return ret;\n          };\n          addProperty(prop, themePropApplicator);\n          colors[prop] = function(str) {\n            return themePropApplicator(str);\n          };\n        }\n      }\n    });\n  }\n\n  colors.setTheme = function(theme) {\n    if (typeof theme === 'string') {\n      console.log('colors.setTheme now only accepts an object, not a string. ' +\n        'If you are trying to set a theme from a file, it is now your (the ' +\n        'caller\\'s) responsibility to require the file.  The old syntax ' +\n        'looked like colors.setTheme(__dirname + ' +\n        '\\'/../themes/generic-logging.js\\'); The new syntax looks like '+\n        'colors.setTheme(require(__dirname + ' +\n        '\\'/../themes/generic-logging.js\\'));');\n      return;\n    } else {\n      applyTheme(theme);\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"script"}