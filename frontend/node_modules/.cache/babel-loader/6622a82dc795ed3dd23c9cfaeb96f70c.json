{"ast":null,"code":"var fs = require(\"fs\");\n\nexports.FILES = [require.resolve(\"../lib/utils.js\"), require.resolve(\"../lib/ast.js\"), require.resolve(\"../lib/transform.js\"), require.resolve(\"../lib/parse.js\"), require.resolve(\"../lib/scope.js\"), require.resolve(\"../lib/compress.js\"), require.resolve(\"../lib/output.js\"), require.resolve(\"../lib/sourcemap.js\"), require.resolve(\"../lib/mozilla-ast.js\"), require.resolve(\"../lib/propmangle.js\"), require.resolve(\"../lib/minify.js\"), require.resolve(\"./exports.js\")];\nnew Function(\"exports\", function () {\n  var code = exports.FILES.map(function (file) {\n    return fs.readFileSync(file, \"utf8\");\n  });\n  code.push(\"exports.describe_ast = \" + describe_ast.toString());\n  return code.join(\"\\n\\n\");\n}())(exports);\n\nfunction to_comment(value) {\n  if (typeof value != \"string\") value = JSON.stringify(value, function (key, value) {\n    return typeof value == \"function\" ? \"<[ \" + value + \" ]>\" : value;\n  }, 2);\n  return \"// \" + value.replace(/\\n/g, \"\\n// \");\n}\n\nif (+process.env[\"UGLIFY_BUG_REPORT\"]) exports.minify = function (files, options) {\n  if (typeof options == \"undefined\") options = \"<<undefined>>\";\n  var code = [\"// UGLIFY_BUG_REPORT\", to_comment(options)];\n\n  if (typeof files == \"string\") {\n    code.push(\"\");\n    code.push(\"//-------------------------------------------------------------\");\n    code.push(\"// INPUT CODE\", files);\n  } else for (var name in files) {\n    code.push(\"\");\n    code.push(\"//-------------------------------------------------------------\");\n    code.push(to_comment(name), files[name]);\n  }\n\n  if (options.sourceMap && options.sourceMap.url) {\n    code.push(\"\");\n    code.push(\"\");\n  }\n\n  var result = {\n    code: code.join(\"\\n\")\n  };\n  if (options.sourceMap) result.map = '{\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\"}';\n  return result;\n};\n\nfunction describe_ast() {\n  var out = OutputStream({\n    beautify: true\n  });\n  doitem(AST_Node);\n  return out.get() + \"\\n\";\n\n  function doitem(ctor) {\n    out.print(\"AST_\" + ctor.TYPE);\n    var props = ctor.SELF_PROPS.filter(function (prop) {\n      return !/^\\$/.test(prop);\n    });\n\n    if (props.length > 0) {\n      out.space();\n      out.with_parens(function () {\n        props.forEach(function (prop, i) {\n          if (i) out.space();\n          out.print(prop);\n        });\n      });\n    }\n\n    if (ctor.documentation) {\n      out.space();\n      out.print_string(ctor.documentation);\n    }\n\n    if (ctor.SUBCLASSES.length > 0) {\n      out.space();\n      out.with_block(function () {\n        ctor.SUBCLASSES.sort(function (a, b) {\n          return a.TYPE < b.TYPE ? -1 : 1;\n        }).forEach(function (ctor, i) {\n          out.indent();\n          doitem(ctor);\n          out.newline();\n        });\n      });\n    }\n  }\n}\n\nfunction infer_options(options) {\n  var result = exports.minify(\"\", options);\n  return result.error && result.error.defs;\n}\n\nexports.default_options = function () {\n  var defs = infer_options({\n    0: 0\n  });\n  Object.keys(defs).forEach(function (component) {\n    var options = {};\n    options[component] = {\n      0: 0\n    };\n\n    if (options = infer_options(options)) {\n      defs[component] = options;\n    }\n  });\n  return defs;\n};","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["var fs = require(\"fs\");\n\nexports.FILES = [\n    require.resolve(\"../lib/utils.js\"),\n    require.resolve(\"../lib/ast.js\"),\n    require.resolve(\"../lib/transform.js\"),\n    require.resolve(\"../lib/parse.js\"),\n    require.resolve(\"../lib/scope.js\"),\n    require.resolve(\"../lib/compress.js\"),\n    require.resolve(\"../lib/output.js\"),\n    require.resolve(\"../lib/sourcemap.js\"),\n    require.resolve(\"../lib/mozilla-ast.js\"),\n    require.resolve(\"../lib/propmangle.js\"),\n    require.resolve(\"../lib/minify.js\"),\n    require.resolve(\"./exports.js\"),\n];\n\nnew Function(\"exports\", function() {\n    var code = exports.FILES.map(function(file) {\n        return fs.readFileSync(file, \"utf8\");\n    });\n    code.push(\"exports.describe_ast = \" + describe_ast.toString());\n    return code.join(\"\\n\\n\");\n}())(exports);\n\nfunction to_comment(value) {\n    if (typeof value != \"string\") value = JSON.stringify(value, function(key, value) {\n        return typeof value == \"function\" ? \"<[ \" + value + \" ]>\" : value;\n    }, 2);\n    return \"// \" + value.replace(/\\n/g, \"\\n// \");\n}\n\nif (+process.env[\"UGLIFY_BUG_REPORT\"]) exports.minify = function(files, options) {\n    if (typeof options == \"undefined\") options = \"<<undefined>>\";\n    var code = [\n        \"// UGLIFY_BUG_REPORT\",\n        to_comment(options),\n    ];\n    if (typeof files == \"string\") {\n        code.push(\"\");\n        code.push(\"//-------------------------------------------------------------\")\n        code.push(\"// INPUT CODE\", files);\n    } else for (var name in files) {\n        code.push(\"\");\n        code.push(\"//-------------------------------------------------------------\")\n        code.push(to_comment(name), files[name]);\n    }\n    if (options.sourceMap && options.sourceMap.url) {\n        code.push(\"\");\n        code.push(\"\");\n    }\n    var result = { code: code.join(\"\\n\") };\n    if (options.sourceMap) result.map = '{\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\"}';\n    return result;\n};\n\nfunction describe_ast() {\n    var out = OutputStream({ beautify: true });\n    doitem(AST_Node);\n    return out.get() + \"\\n\";\n\n    function doitem(ctor) {\n        out.print(\"AST_\" + ctor.TYPE);\n        var props = ctor.SELF_PROPS.filter(function(prop) {\n            return !/^\\$/.test(prop);\n        });\n        if (props.length > 0) {\n            out.space();\n            out.with_parens(function() {\n                props.forEach(function(prop, i) {\n                    if (i) out.space();\n                    out.print(prop);\n                });\n            });\n        }\n        if (ctor.documentation) {\n            out.space();\n            out.print_string(ctor.documentation);\n        }\n        if (ctor.SUBCLASSES.length > 0) {\n            out.space();\n            out.with_block(function() {\n                ctor.SUBCLASSES.sort(function(a, b) {\n                    return a.TYPE < b.TYPE ? -1 : 1;\n                }).forEach(function(ctor, i) {\n                    out.indent();\n                    doitem(ctor);\n                    out.newline();\n                });\n            });\n        }\n    }\n}\n\nfunction infer_options(options) {\n    var result = exports.minify(\"\", options);\n    return result.error && result.error.defs;\n}\n\nexports.default_options = function() {\n    var defs = infer_options({ 0: 0 });\n    Object.keys(defs).forEach(function(component) {\n        var options = {};\n        options[component] = { 0: 0 };\n        if (options = infer_options(options)) {\n            defs[component] = options;\n        }\n    });\n    return defs;\n};\n"]},"metadata":{},"sourceType":"script"}