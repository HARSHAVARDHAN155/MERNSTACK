{"ast":null,"code":"/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\"use strict\";\n\nfunction TreeTransformer(before, after) {\n  TreeWalker.call(this);\n  this.before = before;\n  this.after = after;\n}\n\nTreeTransformer.prototype = new TreeWalker();\n\n(function (DEF) {\n  function do_list(list, tw) {\n    return List(list, function (node) {\n      return node.transform(tw, true);\n    });\n  }\n\n  DEF(AST_Node, noop);\n  DEF(AST_LabeledStatement, function (self, tw) {\n    self.label = self.label.transform(tw);\n    self.body = self.body.transform(tw);\n  });\n  DEF(AST_SimpleStatement, function (self, tw) {\n    self.body = self.body.transform(tw);\n  });\n  DEF(AST_Block, function (self, tw) {\n    self.body = do_list(self.body, tw);\n  });\n  DEF(AST_Do, function (self, tw) {\n    self.body = self.body.transform(tw);\n    self.condition = self.condition.transform(tw);\n  });\n  DEF(AST_While, function (self, tw) {\n    self.condition = self.condition.transform(tw);\n    self.body = self.body.transform(tw);\n  });\n  DEF(AST_For, function (self, tw) {\n    if (self.init) self.init = self.init.transform(tw);\n    if (self.condition) self.condition = self.condition.transform(tw);\n    if (self.step) self.step = self.step.transform(tw);\n    self.body = self.body.transform(tw);\n  });\n  DEF(AST_ForEnumeration, function (self, tw) {\n    self.init = self.init.transform(tw);\n    self.object = self.object.transform(tw);\n    self.body = self.body.transform(tw);\n  });\n  DEF(AST_With, function (self, tw) {\n    self.expression = self.expression.transform(tw);\n    self.body = self.body.transform(tw);\n  });\n  DEF(AST_Exit, function (self, tw) {\n    if (self.value) self.value = self.value.transform(tw);\n  });\n  DEF(AST_LoopControl, function (self, tw) {\n    if (self.label) self.label = self.label.transform(tw);\n  });\n  DEF(AST_If, function (self, tw) {\n    self.condition = self.condition.transform(tw);\n    self.body = self.body.transform(tw);\n    if (self.alternative) self.alternative = self.alternative.transform(tw);\n  });\n  DEF(AST_Switch, function (self, tw) {\n    self.expression = self.expression.transform(tw);\n    self.body = do_list(self.body, tw);\n  });\n  DEF(AST_Case, function (self, tw) {\n    self.expression = self.expression.transform(tw);\n    self.body = do_list(self.body, tw);\n  });\n  DEF(AST_Try, function (self, tw) {\n    self.body = do_list(self.body, tw);\n    if (self.bcatch) self.bcatch = self.bcatch.transform(tw);\n    if (self.bfinally) self.bfinally = self.bfinally.transform(tw);\n  });\n  DEF(AST_Catch, function (self, tw) {\n    if (self.argname) self.argname = self.argname.transform(tw);\n    self.body = do_list(self.body, tw);\n  });\n  DEF(AST_Definitions, function (self, tw) {\n    self.definitions = do_list(self.definitions, tw);\n  });\n  DEF(AST_VarDef, function (self, tw) {\n    self.name = self.name.transform(tw);\n    if (self.value) self.value = self.value.transform(tw);\n  });\n  DEF(AST_DefaultValue, function (self, tw) {\n    self.name = self.name.transform(tw);\n    self.value = self.value.transform(tw);\n  });\n  DEF(AST_Lambda, function (self, tw) {\n    if (self.name) self.name = self.name.transform(tw);\n    self.argnames = do_list(self.argnames, tw);\n    if (self.rest) self.rest = self.rest.transform(tw);\n    self.body = do_list(self.body, tw);\n  });\n\n  function transform_arrow(self, tw) {\n    self.argnames = do_list(self.argnames, tw);\n    if (self.rest) self.rest = self.rest.transform(tw);\n\n    if (self.value) {\n      self.value = self.value.transform(tw);\n    } else {\n      self.body = do_list(self.body, tw);\n    }\n  }\n\n  DEF(AST_Arrow, transform_arrow);\n  DEF(AST_AsyncArrow, transform_arrow);\n  DEF(AST_Class, function (self, tw) {\n    if (self.name) self.name = self.name.transform(tw);\n    if (self.extends) self.extends = self.extends.transform(tw);\n    self.properties = do_list(self.properties, tw);\n  });\n  DEF(AST_ClassProperty, function (self, tw) {\n    if (self.key instanceof AST_Node) self.key = self.key.transform(tw);\n    if (self.value) self.value = self.value.transform(tw);\n  });\n  DEF(AST_Call, function (self, tw) {\n    self.expression = self.expression.transform(tw);\n    self.args = do_list(self.args, tw);\n  });\n  DEF(AST_Sequence, function (self, tw) {\n    self.expressions = do_list(self.expressions, tw);\n  });\n  DEF(AST_Await, function (self, tw) {\n    self.expression = self.expression.transform(tw);\n  });\n  DEF(AST_Yield, function (self, tw) {\n    if (self.expression) self.expression = self.expression.transform(tw);\n  });\n  DEF(AST_Dot, function (self, tw) {\n    self.expression = self.expression.transform(tw);\n  });\n  DEF(AST_Sub, function (self, tw) {\n    self.expression = self.expression.transform(tw);\n    self.property = self.property.transform(tw);\n  });\n  DEF(AST_Spread, function (self, tw) {\n    self.expression = self.expression.transform(tw);\n  });\n  DEF(AST_Unary, function (self, tw) {\n    self.expression = self.expression.transform(tw);\n  });\n  DEF(AST_Binary, function (self, tw) {\n    self.left = self.left.transform(tw);\n    self.right = self.right.transform(tw);\n  });\n  DEF(AST_Conditional, function (self, tw) {\n    self.condition = self.condition.transform(tw);\n    self.consequent = self.consequent.transform(tw);\n    self.alternative = self.alternative.transform(tw);\n  });\n  DEF(AST_Array, function (self, tw) {\n    self.elements = do_list(self.elements, tw);\n  });\n  DEF(AST_DestructuredArray, function (self, tw) {\n    self.elements = do_list(self.elements, tw);\n    if (self.rest) self.rest = self.rest.transform(tw);\n  });\n  DEF(AST_DestructuredKeyVal, function (self, tw) {\n    if (self.key instanceof AST_Node) self.key = self.key.transform(tw);\n    self.value = self.value.transform(tw);\n  });\n  DEF(AST_DestructuredObject, function (self, tw) {\n    self.properties = do_list(self.properties, tw);\n    if (self.rest) self.rest = self.rest.transform(tw);\n  });\n  DEF(AST_Object, function (self, tw) {\n    self.properties = do_list(self.properties, tw);\n  });\n  DEF(AST_ObjectProperty, function (self, tw) {\n    if (self.key instanceof AST_Node) self.key = self.key.transform(tw);\n    self.value = self.value.transform(tw);\n  });\n  DEF(AST_ExportDeclaration, function (self, tw) {\n    self.body = self.body.transform(tw);\n  });\n  DEF(AST_ExportDefault, function (self, tw) {\n    self.body = self.body.transform(tw);\n  });\n  DEF(AST_ExportReferences, function (self, tw) {\n    self.properties = do_list(self.properties, tw);\n  });\n  DEF(AST_Import, function (self, tw) {\n    if (self.all) self.all = self.all.transform(tw);\n    if (self.default) self.default = self.default.transform(tw);\n    if (self.properties) self.properties = do_list(self.properties, tw);\n  });\n  DEF(AST_Template, function (self, tw) {\n    if (self.tag) self.tag = self.tag.transform(tw);\n    self.expressions = do_list(self.expressions, tw);\n  });\n})(function (node, descend) {\n  node.DEFMETHOD(\"transform\", function (tw, in_list) {\n    var x, y;\n    tw.push(this);\n    if (tw.before) x = tw.before(this, descend, in_list);\n\n    if (typeof x === \"undefined\") {\n      x = this;\n      descend(x, tw);\n\n      if (tw.after) {\n        y = tw.after(x, in_list);\n        if (typeof y !== \"undefined\") x = y;\n      }\n    }\n\n    tw.pop();\n    return x;\n  });\n});","map":{"version":3,"sources":["/home/harsha/Desktop/ug2 spring SEM2/DAss/mongo/frontend/node_modules/uglify-js/lib/transform.js"],"names":["TreeTransformer","before","after","TreeWalker","call","prototype","DEF","do_list","list","tw","List","node","transform","AST_Node","noop","AST_LabeledStatement","self","label","body","AST_SimpleStatement","AST_Block","AST_Do","condition","AST_While","AST_For","init","step","AST_ForEnumeration","object","AST_With","expression","AST_Exit","value","AST_LoopControl","AST_If","alternative","AST_Switch","AST_Case","AST_Try","bcatch","bfinally","AST_Catch","argname","AST_Definitions","definitions","AST_VarDef","name","AST_DefaultValue","AST_Lambda","argnames","rest","transform_arrow","AST_Arrow","AST_AsyncArrow","AST_Class","extends","properties","AST_ClassProperty","key","AST_Call","args","AST_Sequence","expressions","AST_Await","AST_Yield","AST_Dot","AST_Sub","property","AST_Spread","AST_Unary","AST_Binary","left","right","AST_Conditional","consequent","AST_Array","elements","AST_DestructuredArray","AST_DestructuredKeyVal","AST_DestructuredObject","AST_Object","AST_ObjectProperty","AST_ExportDeclaration","AST_ExportDefault","AST_ExportReferences","AST_Import","all","default","AST_Template","tag","descend","DEFMETHOD","in_list","x","y","push","pop"],"mappings":"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","sourcesContent":["/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nfunction TreeTransformer(before, after) {\n    TreeWalker.call(this);\n    this.before = before;\n    this.after = after;\n}\nTreeTransformer.prototype = new TreeWalker;\n\n(function(DEF) {\n    function do_list(list, tw) {\n        return List(list, function(node) {\n            return node.transform(tw, true);\n        });\n    }\n\n    DEF(AST_Node, noop);\n    DEF(AST_LabeledStatement, function(self, tw) {\n        self.label = self.label.transform(tw);\n        self.body = self.body.transform(tw);\n    });\n    DEF(AST_SimpleStatement, function(self, tw) {\n        self.body = self.body.transform(tw);\n    });\n    DEF(AST_Block, function(self, tw) {\n        self.body = do_list(self.body, tw);\n    });\n    DEF(AST_Do, function(self, tw) {\n        self.body = self.body.transform(tw);\n        self.condition = self.condition.transform(tw);\n    });\n    DEF(AST_While, function(self, tw) {\n        self.condition = self.condition.transform(tw);\n        self.body = self.body.transform(tw);\n    });\n    DEF(AST_For, function(self, tw) {\n        if (self.init) self.init = self.init.transform(tw);\n        if (self.condition) self.condition = self.condition.transform(tw);\n        if (self.step) self.step = self.step.transform(tw);\n        self.body = self.body.transform(tw);\n    });\n    DEF(AST_ForEnumeration, function(self, tw) {\n        self.init = self.init.transform(tw);\n        self.object = self.object.transform(tw);\n        self.body = self.body.transform(tw);\n    });\n    DEF(AST_With, function(self, tw) {\n        self.expression = self.expression.transform(tw);\n        self.body = self.body.transform(tw);\n    });\n    DEF(AST_Exit, function(self, tw) {\n        if (self.value) self.value = self.value.transform(tw);\n    });\n    DEF(AST_LoopControl, function(self, tw) {\n        if (self.label) self.label = self.label.transform(tw);\n    });\n    DEF(AST_If, function(self, tw) {\n        self.condition = self.condition.transform(tw);\n        self.body = self.body.transform(tw);\n        if (self.alternative) self.alternative = self.alternative.transform(tw);\n    });\n    DEF(AST_Switch, function(self, tw) {\n        self.expression = self.expression.transform(tw);\n        self.body = do_list(self.body, tw);\n    });\n    DEF(AST_Case, function(self, tw) {\n        self.expression = self.expression.transform(tw);\n        self.body = do_list(self.body, tw);\n    });\n    DEF(AST_Try, function(self, tw) {\n        self.body = do_list(self.body, tw);\n        if (self.bcatch) self.bcatch = self.bcatch.transform(tw);\n        if (self.bfinally) self.bfinally = self.bfinally.transform(tw);\n    });\n    DEF(AST_Catch, function(self, tw) {\n        if (self.argname) self.argname = self.argname.transform(tw);\n        self.body = do_list(self.body, tw);\n    });\n    DEF(AST_Definitions, function(self, tw) {\n        self.definitions = do_list(self.definitions, tw);\n    });\n    DEF(AST_VarDef, function(self, tw) {\n        self.name = self.name.transform(tw);\n        if (self.value) self.value = self.value.transform(tw);\n    });\n    DEF(AST_DefaultValue, function(self, tw) {\n        self.name = self.name.transform(tw);\n        self.value = self.value.transform(tw);\n    });\n    DEF(AST_Lambda, function(self, tw) {\n        if (self.name) self.name = self.name.transform(tw);\n        self.argnames = do_list(self.argnames, tw);\n        if (self.rest) self.rest = self.rest.transform(tw);\n        self.body = do_list(self.body, tw);\n    });\n    function transform_arrow(self, tw) {\n        self.argnames = do_list(self.argnames, tw);\n        if (self.rest) self.rest = self.rest.transform(tw);\n        if (self.value) {\n            self.value = self.value.transform(tw);\n        } else {\n            self.body = do_list(self.body, tw);\n        }\n    }\n    DEF(AST_Arrow, transform_arrow);\n    DEF(AST_AsyncArrow, transform_arrow);\n    DEF(AST_Class, function(self, tw) {\n        if (self.name) self.name = self.name.transform(tw);\n        if (self.extends) self.extends = self.extends.transform(tw);\n        self.properties = do_list(self.properties, tw);\n    });\n    DEF(AST_ClassProperty, function(self, tw) {\n        if (self.key instanceof AST_Node) self.key = self.key.transform(tw);\n        if (self.value) self.value = self.value.transform(tw);\n    });\n    DEF(AST_Call, function(self, tw) {\n        self.expression = self.expression.transform(tw);\n        self.args = do_list(self.args, tw);\n    });\n    DEF(AST_Sequence, function(self, tw) {\n        self.expressions = do_list(self.expressions, tw);\n    });\n    DEF(AST_Await, function(self, tw) {\n        self.expression = self.expression.transform(tw);\n    });\n    DEF(AST_Yield, function(self, tw) {\n        if (self.expression) self.expression = self.expression.transform(tw);\n    });\n    DEF(AST_Dot, function(self, tw) {\n        self.expression = self.expression.transform(tw);\n    });\n    DEF(AST_Sub, function(self, tw) {\n        self.expression = self.expression.transform(tw);\n        self.property = self.property.transform(tw);\n    });\n    DEF(AST_Spread, function(self, tw) {\n        self.expression = self.expression.transform(tw);\n    });\n    DEF(AST_Unary, function(self, tw) {\n        self.expression = self.expression.transform(tw);\n    });\n    DEF(AST_Binary, function(self, tw) {\n        self.left = self.left.transform(tw);\n        self.right = self.right.transform(tw);\n    });\n    DEF(AST_Conditional, function(self, tw) {\n        self.condition = self.condition.transform(tw);\n        self.consequent = self.consequent.transform(tw);\n        self.alternative = self.alternative.transform(tw);\n    });\n    DEF(AST_Array, function(self, tw) {\n        self.elements = do_list(self.elements, tw);\n    });\n    DEF(AST_DestructuredArray, function(self, tw) {\n        self.elements = do_list(self.elements, tw);\n        if (self.rest) self.rest = self.rest.transform(tw);\n    });\n    DEF(AST_DestructuredKeyVal, function(self, tw) {\n        if (self.key instanceof AST_Node) self.key = self.key.transform(tw);\n        self.value = self.value.transform(tw);\n    });\n    DEF(AST_DestructuredObject, function(self, tw) {\n        self.properties = do_list(self.properties, tw);\n        if (self.rest) self.rest = self.rest.transform(tw);\n    });\n    DEF(AST_Object, function(self, tw) {\n        self.properties = do_list(self.properties, tw);\n    });\n    DEF(AST_ObjectProperty, function(self, tw) {\n        if (self.key instanceof AST_Node) self.key = self.key.transform(tw);\n        self.value = self.value.transform(tw);\n    });\n    DEF(AST_ExportDeclaration, function(self, tw) {\n        self.body = self.body.transform(tw);\n    });\n    DEF(AST_ExportDefault, function(self, tw) {\n        self.body = self.body.transform(tw);\n    });\n    DEF(AST_ExportReferences, function(self, tw) {\n        self.properties = do_list(self.properties, tw);\n    });\n    DEF(AST_Import, function(self, tw) {\n        if (self.all) self.all = self.all.transform(tw);\n        if (self.default) self.default = self.default.transform(tw);\n        if (self.properties) self.properties = do_list(self.properties, tw);\n    });\n    DEF(AST_Template, function(self, tw) {\n        if (self.tag) self.tag = self.tag.transform(tw);\n        self.expressions = do_list(self.expressions, tw);\n    });\n})(function(node, descend) {\n    node.DEFMETHOD(\"transform\", function(tw, in_list) {\n        var x, y;\n        tw.push(this);\n        if (tw.before) x = tw.before(this, descend, in_list);\n        if (typeof x === \"undefined\") {\n            x = this;\n            descend(x, tw);\n            if (tw.after) {\n                y = tw.after(x, in_list);\n                if (typeof y !== \"undefined\") x = y;\n            }\n        }\n        tw.pop();\n        return x;\n    });\n});\n"]},"metadata":{},"sourceType":"script"}